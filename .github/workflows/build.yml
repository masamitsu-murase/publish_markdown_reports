name: build

on:
  push:
    branches: [ main, develop, support_github_actions ]
    tags: ['v*']
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
        - windows-2019
        - ubuntu-20.04

    runs-on: ${{ matrix.os }}

    steps:
    - run: git config --global core.autocrlf false
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - run: npm ci
      working-directory: PublishMarkdownReports

    - run: npm ci

    - run: npm run test
      working-directory: PublishMarkdownReports

    - run: npm run test

  build:
    needs: test

    runs-on: windows-2019

    steps:
    - run: git config --global core.autocrlf false
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - run: npm ci --production
      working-directory: PublishMarkdownReports

    - run: npm ci

    - run: npm run build
      working-directory: PublishMarkdownReports

    - run: rd /s /q tests
      working-directory: PublishMarkdownReports
      shell: cmd

    - run: npm run build

    - uses: actions/upload-artifact@v2
      with:
        name: vsix
        path: ./*.vsix

  release:
    if: startsWith(github.ref, 'refs/tags/v')

    needs: build

    runs-on: ubuntu-20.04

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release note.
        draft: true
        prerelease: false

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: vsix
        path: vsix

    - run: ls -alF vsix

    - name: Upload all artifacts
      uses: actions/github-script@v3
      with:
        release_id: ${{ steps.create_release.outputs.id }}
        assets_dir: vsix
        script: |
          console.log("environment", process.versions);
          const fs = require("fs").promises;
          const path = require("path");
          const { repo: { owner, repo } } = context;
          const release_id = core.getInput("release_id", { required: true });
          const assets_dir = core.getInput("assets_dir", { required: true });

          const files = await fs.readdir(assets_dir);
          console.log("files", files);
          const asset_uploaders = files.map(file => path.join(assets_dir, file)).map(file => {
            return fs.readFile(file).then(data => {
              return github.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id,
                name: path.basename(file),
                data
              });
            });
          })
          Promise.all(asset_uploaders);
